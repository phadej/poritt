include "lib/leibniz.ptt"

-- eta for pi
type (\ _ -> %refl) :
  forall (f : U -> U)
  -> Id {U -> U} f (\ x -> f x)

-- eta for sigma
type (\ _ -> %refl) :
  forall (p : U * U)
  -> Id {U * U} p (p .fst , p .snd)

-- eta for singleton types
type (\ _ -> %refl) :
  forall (x : #[:tt])
  -> Id {#[:tt]} x :tt

type (\ _ _ -> %refl) :
  forall (x y : #[:tt])
  -> Id {#[:tt]} x y

-- eta for Unit type
type (\ _ _ -> %refl) :
  forall (x y : Unit)
  -> Id {Unit} x y

-- product of singleton types
type (\ _ _ -> %refl) :
  forall (x y : #[:left] * #[:right])
  -> Id {#[:left] * #[:right]} x y
