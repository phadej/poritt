include "../lib/nat.ptt"

define NatC : U = #[:zero :succ]

define NatF : NatC → Desc = [ `1 (`X `1) ]

define NatD : Desc = `S NatC NatF

define Nat : U = μ NatD

eval Nat = μ (`S #[:zero :succ] [ `1 (`X `1) ]) : U

define zero : Nat = :zero

define succ : Nat → Nat = λ n ↦ :succ n

one : Nat
one = succ zero

two : Nat
two = succ one

three : Nat
three = succ two

four : Nat
four = succ three

five : Nat
five = succ four

define indNat
  : ∀
    (M : Nat → U) →
    M zero → (∀ (n : Nat) → M n → M (succ n)) → ∀ (e : Nat) → M e
  = λ M Mzero Msucc e ↦
    ind
      e
      M
      (λ d ↦
         (switch (d .fst) (λ c' ↦
                             ∀
                               (y : evalDesc (NatF c') Nat) →
                               All (NatF c') Nat M y → M (con (c' , y)))
            {:zero ↦ λ _ _ ↦ Mzero; :succ ↦ λ n Mn ↦ Msucc (n .fst) (Mn .fst)})
           (d .snd))

define iterNat
  : ∀ (A : U) → A → (A → A) → Nat → A
  = λ A z s ↦ indNat (λ _ ↦ A) z (λ _ n ↦ s n)

define paraNat
  : ∀ (A : U) → A → (Nat → A → A) → Nat → A
  = λ A z s ↦ indNat (λ _ ↦ A) z (λ n a ↦ s n a)

define caseNat
  : Nat → ∀ (A : U) → A → (Nat → A) → A
  = λ m A z s ↦ paraNat A z (λ n _ ↦ s n) m

define plus : Nat → Nat → Nat = λ n m ↦ iterNat Nat m succ n

define mult : Nat → Nat → Nat = λ n m ↦ iterNat Nat zero (plus m) n

include "bool.ptt"

Bool : U
Bool = #[:false :true]

true : Bool
true = :true

false : Bool
false = :false

inline true

inline false

if : Bool → ∀ (A : U) → A → A → A
if = [ (λ _ t f ↦ f) (λ _ t f ↦ t) ]

not : Bool → Bool
not = [ :true :false ]

and : Bool → Bool → Bool
and = [ (λ _ ↦ :false) (λ y ↦ y) ]

or : Bool → Bool → Bool
or = [ (λ y ↦ y) (λ _ ↦ :true) ]

eqBool : Bool → Bool → Bool
eqBool = [ [ :true :false ] [ :false :true ] ]

eqUnit : Unit → Unit → Bool
eqUnit = λ _ _ ↦ :true

end-of-file "examples/staging/../lib/bool.ptt"

define isZero : Nat → Bool = λ n ↦ caseNat n Bool :true (λ _ ↦ :false)

define eqNat
  : Nat → Nat → Bool
  = iterNat (Nat → Bool) isZero (λ rec m ↦ caseNat m Bool :false rec)

end-of-file "examples/staging/../lib/nat.ptt"

define power
  : Nat → Nat → Nat
  = λ n m ↦ iterNat Nat (succ zero) (λ acc ↦ mult m acc) n

power5 : Nat → Nat
power5 = power five

define powerCode
  : Nat → Code ⟦ Nat ⟧ → Code ⟦ Nat ⟧
  = λ n m ↦ iterNat (Code ⟦ Nat ⟧) ⟦ succ zero ⟧ (λ acc ↦ ⟦ mult $m $acc ⟧) n

define power5'
  : Nat → Nat
  = λ p ↦ mult p (mult p (mult p (mult p (mult p (succ zero)))))

include "../lib/leibniz.ptt"

define Id : ∀ {A : U} → A → A → U = λ x y ↦ ∀ (C : A → U) → C x → C y

define refl : ∀ {A : U} (x : A) → Id x x = λ x C Cx ↦ Cx

macro %refl 
  = λ _ Cx ↦ Cx

define sym
  : ∀ (A : U) (x : A) (y : A) → Id x y → Id y x
  = λ A x y x=y ↦ x=y (λ z ↦ Id z x) (refl x)

define trans
  : ∀ (A : U) (x : A) (y : A) (z : A) → Id x y → Id y z → Id x z
  = λ A x y z x=y y=z ↦ y=z (λ v ↦ Id x v) x=y

end-of-file "examples/staging/../lib/leibniz.ptt"

type %refl : Id {Nat} (power5 two) (power5' two) : Id (power5 two) (power5' two)

type %refl : Id {Nat → Nat} power5 power5' : Id power5 power5'

end-of-file "examples/staging/power.ptt"

