include "lib/leibniz.ptt"

define Id : ∀ {A : U} → A → A → U = λ x y ↦ ∀ (C : A → U) → C x → C y

define refl : ∀ {A : U} (x : A) → Id x x = λ x C Cx ↦ Cx

macro %refl 
  = λ _ Cx ↦ Cx

define sym
  : ∀ (A : U) (x : A) (y : A) → Id x y → Id y x
  = λ A x y x=y ↦ x=y (λ z ↦ Id z x) (refl x)

define trans
  : ∀ (A : U) (x : A) (y : A) (z : A) → Id x y → Id y z → Id x z
  = λ A x y z x=y y=z ↦ y=z (λ v ↦ Id x v) x=y

end-of-file "examples/lib/leibniz.ptt"

type (λ _ ↦ %refl) : ∀ (f : U → U) → Id {U → U} f (λ x ↦ f x)
  : ∀ (f : U → U) → Id f (λ x ↦ f x)

type (λ _ ↦ %refl) : ∀ (p : U × U) → Id {U × U} p (p .fst , p .snd)
  : ∀ (p : U × U) → Id p (p .fst , p .snd)

type (λ _ ↦ %refl) : ∀ (x : #[:tt]) → Id {#[:tt]} x :tt
  : ∀ (x : #[:tt]) → Id x :tt

type (λ _ _ ↦ %refl) : ∀ (x : #[:tt]) (y : #[:tt]) → Id {#[:tt]} x y
  : ∀ (x : #[:tt]) (y : #[:tt]) → Id x y

type (λ _ _ ↦ %refl) : ∀ (x : Unit) (y : Unit) → Id {Unit} x y
  : ∀ (x : Unit) (y : Unit) → Id x y

type (λ _ _ ↦ %refl)
    : ∀
      (x : #[:left] × #[:right]) (y : #[:left] × #[:right]) →
      Id {#[:left] × #[:right]} x y
  : ∀ (x : #[:left] × #[:right]) (y : #[:left] × #[:right]) → Id x y

end-of-file "examples/eta.ptt"

