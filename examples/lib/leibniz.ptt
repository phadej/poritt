define Id : forall {A : U} (x y : A) -> U
          = \ {A} x y -> forall (C : A -> U) -> C x -> C y

-- Only the type is implicit.
-- The common use is `refl _`, when the argument can be elaborated.
-- but in some cases we want to write that.
-- And yet, we almost never need to write the type.
define refl : forall {A : U} (x : A) -> Id {A} x x
            = \ {A} x C Cx -> Cx

macro %refl = \ _ Cx -> Cx

define sym : forall (A : U) (x y : A) -> Id {A} x y -> Id {A} y x
           = \ A x y x=y -> x=y (\ z -> Id {A} z x) (refl {A} x)

define trans : forall (A : U) (x y z : A) -> Id {A} x y -> Id {A} y z -> Id {A} x z
             = \ A x y z x=y y=z -> y=z (\ v -> Id {A} x v) x=y
