define I : ∀ (A : U) → A → A = λ _ x ↦ x

type I : ∀ (A : U) → A → A

define K : ∀ (A : U) (B : U) → A → B → A = λ _ _ x _ ↦ x

eval K = λ _ _ x _ ↦ x : ∀ (A : U) (B : U) → A → B → A

define S
  : ∀ (A : U) (B : U) (C : U) → (A → B → C) → (A → B) → A → C
  = λ _ _ _ x y z ↦ x z (y z)

define I2 : ∀ (A : U) → A → A = λ A ↦ S A (A → A) A (K A (A → A)) (K A A)

include "lib/leibniz.ptt"

define Id : ∀ {A : U} → A → A → U = λ x y ↦ ∀ (C : A → U) → C x → C y

define refl : ∀ {A : U} (x : A) → Id x x = λ x C Cx ↦ Cx

macro %refl 
  = λ _ Cx ↦ Cx

define sym
  : ∀ (A : U) (x : A) (y : A) → Id x y → Id y x
  = λ A x y x=y ↦ x=y (λ z ↦ Id z x) (refl x)

define trans
  : ∀ (A : U) (x : A) (y : A) (z : A) → Id x y → Id y z → Id x z
  = λ A x y z x=y y=z ↦ y=z (λ v ↦ Id x v) x=y

end-of-file "examples/lib/leibniz.ptt"

type %refl : Id {∀ (A : U) → A → A} I I2 : Id I I2

end-of-file "examples/ski.ptt"

